limit_req_zone $binary_remote_addr zone=loginLimit:10m rate=1r/s;
limit_req_zone $binary_remote_addr zone=registrationLimit:10m rate=1r/s;

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    return 301 https://$host$request_uri;
}

map $http_cookie $is_session_cookie {
    "~*SESSION=*" 0;
    "" 1;
    default 1;
}

server {
    server_name  localhost;

    # listen 80 default_server;
    # listen [::]:80 default_server;

    listen              443 ssl http2;
    listen              [::]:443 ssl http2;
    ssl_certificate     conf.d/free-project.crt;
    ssl_certificate_key conf.d/free-project_without_password.key;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    access_log  /var/log/nginx/host.access.log  main;

    # location / {
    #     root   /usr/share/nginx/html;
    #     index  index.html index.htm;
    # }

    error_page  404              /custom404.json;
    
    location = /custom404.json {
        root   /etc/nginx/conf.d/;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504 /custom50x.json;
    location = /custom50x.json {
        root   /etc/nginx/conf.d/;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    location / {
        proxy_pass   https://hosts;
    }

    location /api {
        if ($is_session_cookie) {
            return 401 '{"status": false, "error": "Для продолжения работы необходимо авторизироваться"}\n';
        }
        proxy_pass   https://hosts;
    }

    location /api/login {
        limit_req zone=loginLimit;
        limit_req_status 429;

        limit_except POST {
            deny all;
        }        
        error_page 403 = @405;
        error_page 429 = @429;

        proxy_pass   https://hosts;
    }

    location /api/users/registration {
        limit_req zone=registrationLimit;
        limit_req_status 429;

        limit_except POST {
            deny all;
        }        
        error_page 403 = @405;
        error_page 429 = @429;

        proxy_pass   https://hosts;
    }

    location @405 { 
        default_type application/json;
        return 405 '{"status": false, "error": "Method Not Allowed"}\n'; 
    }

    location @429 { 
        default_type application/json;
        return 429 '{"status": false, "error": "Too Many Requests"}\n'; 
    }
}

